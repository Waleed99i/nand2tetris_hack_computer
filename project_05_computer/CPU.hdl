// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /*   RECALL
Hack C-instruction format

A C-instruction looks like this:
1 cccc cc ddd jjj

    Bit 15 = 1 (means it’s a C-instruction).

    Bits 14–6 = computation control (ALU).

    Bits 5–3 = dest bits (ddd).

    Bits 2–0 = jump bits (jjj).

Dest bits (ddd)

    instrcution[0],[1],[2] → jump conditions

    instruction[5] → write ALU result into A register.

    instruction[4] → write ALU result into D register.

    instruction[3] → write ALU result into M (i.e. memory at address A).

    */


    // --- Step 1: Decode instruction type (A or C) ---
    DMux(in=true, sel=instruction[15], a=atype, b=ctype);

    // Load control signals for A-register (for A-instruction or when dest=A)
    Or(a=atype, b=instruction[5], out=ainstruct);
    And(a=ctype, b=instruction[4], out=cinstruct);

    // --- Step 2: A register ---
    // If A-instruction, load instruction. If C-instruction with dest=A, load ALU output.
    Mux16(a=aluout, b=instruction, sel=atype, out=toareg);
    ARegister(in=toareg, load=ainstruct, out=aregout, out[0..14]=addressM);

    // --- Step 3: ALU and D register ---
    // ALU input can be A or M (controlled by instruction[12])
    Mux16(a=aregout, b=inM, sel=instruction[12], out=inputsel);

    // Perform computation
    ALU(x=dregout, y=inputsel, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=aluout, zr=zrout, ng=ngout, out=outM);

    // Write to memory if dest includes M
    And(a=ctype, b=instruction[3], out=writeM);

    // Update D register if dest includes D
    DRegister(in=aluout, load=cinstruct, out=dregout);

    // --- Step 4: Program Counter (PC) ---
    // Use ALU flags to decide if jump condition is true
    Or(a=zrout, b=ngout, out=leqzero);		
    Not(in=leqzero, out=posout);

    And(a=instruction[0], b=posout, out=jgt); // Jump if >0
    And(a=instruction[1], b=zrout, out=jeq);  // Jump if =0
    And(a=instruction[2], b=ngout, out=jlt);  // Jump if <0
    Or(a=jeq, b=jlt, out=jle);                // Jump if <=0
    Or(a=jgt, b=jle, out=jmp);                // Jump if any condition true

    And(a=jmp, b=ctype, out=dojump);          // Only C-instructions can jump
    Not(in=dojump, out=nojump);

    // Update PC: either A (jump), A=0 (reset), or next instruction
    PC(in=aregout, load=dojump, inc=nojump, reset=reset, out[0..14]=pc);
}
